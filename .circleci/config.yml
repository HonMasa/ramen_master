version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # ruby2.6.3を使ったアプリのため
      - image: circleci/ruby:2.6.3-node-browsers
        environment:

          - BUNDLER_VERSION: 2.0.2

          - RAILS_ENV: 'test'

      - image: circleci/mysql:5.7
        environment:
          - MYSQL_ALLOW_EMPTY_PASSWORD: 'true'
          - MYSQL_ROOT_HOST: '%'

    working_directory: ~/repo

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            gem install bundler -v 2.0.2
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      - run: mv config/database.yml.ci config/database.yml 

      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

# rubocop
      - run:
          name: Rubocop
          command: bundle exec rubocop

# rspec
      
      - run:
          name: run tests
          command: |
            rm -rf bin/webpack*

            gem install rails

            rails webpacker:install

            RAILS_ENV=test bundle exec rails webpacker:compile

            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"

            bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress \
              $TEST_FILES

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

      - add_ssh_keys:
          fingerprints: "64:a5:d5:dc:33:b4:d6:17:dd:1c:a8:a7:05:a7:be:77"

      - deploy:
          name: Capistrano deploy
          command: |
            bundle install
            gem install capistrano
            gem install 'capistrano-rbenv'
            gem install 'capistrano-bundler'
            gem install 'capistrano-rails'
            gem install 'capistrano3-puma'
            cap install
            if [ "${CIRCLE_BRANCH}" != "master" ]; then
              exit 0
            fi
            bundle exec cap production deploy
